en .config
git clone https://github.com/tobi-wan-kenobi/bumblebee-status

yay -S ttf-hack-nerd
yay -S nerd-fonts

bar {
	i3bar_command i3bar --transparency
	# status_command i3status

	# https://github.com/tobi-wan-kenobi/bumblebee-status
	# https://bumblebee-status.readthedocs.io/en/main/modules.html
	status_command ~/.config/bumblebee-status/bumblebee-status \
	-t greyish-powerline \
	-m weather -p weather.location=talca \
	-m pomodoro kernel disk \
	sensors2 -p sensors2.chip='sensors -u' sensors2.showname=true \
	-m memory aur-update arch-update date -p date.format='%a, %d %b %Y' \
	-m time -p time.format='%H:%M'
	# position top
	output DP-4
	tray_output primary
	colors {
		background #00000000
		statusline #ffffff
		separator #666666

		focused_workspace #4c7899 #285577 #ffffff
		active_workspace #333333 #5f676a #ffffff
		inactive_workspace #333333 #222222 #888888
		urgent_workspace #2f343a #900000 #ffffff
		binding_mode #2f343a #900000 #ffffff
	}
}


# neofetch en fish
~/.config/fish/config.fish

# temas neofetch
https://github.com/Chick2D/neofetch-themes?tab=readme-ov-file

# Arch wallpapers
https://bbs.archlinux.org/viewtopic.php?id=259604

# Bluetooth
sudo pacman -S bluez bluez-utils pulseaudio-bluetooth
sudo systemctl start bluetooth
sudo systemctl enable bluetooth
bluetoothctl

power on: Enciende el Bluetooth.
agent on: Habilita el agente de emparejamiento.
default-agent: Establece el agente predeterminado.
scan on: Escanea dispositivos Bluetooth cercanos.
Una vez que tu dispositivo sea detectado, utiliza el 
comando pair MAC_address (reemplaza MAC_address por 
la dirección MAC de tu dispositivo) para emparejarlo.
Después de emparejarlo, usa trust MAC_address para 
confiar en el dispositivo.
Finalmente, usa connect MAC_address para conectar el dispositivo.

connect 38:18:4C:4C:0D:EF

# GUI para controlar volumen y dispositivos de audio
sudo pacman -S pavucontrol


# aswitch2
```bash
#!/bin/bash

# Lista de dispositivos de audio disponibles
audio_devices=$(pacmd list-sinks | awk '/index:/{print $NF}')

# Archivo para almacenar el nombre del último dispositivo utilizado
device_file="$HOME/.last_audio_device_name"

# Si el archivo de dispositivo no existe, lo crea con el primer dispositivo de la lista
if [ ! -f "$device_file" ]; then
    echo "$audio_devices" | head -n 1 > "$device_file"
fi

# Lee el nombre del último dispositivo utilizado
last_device=$(cat "$device_file")

# Encuentra el nombre del siguiente dispositivo
next_device=""
found_next=false
for device in $audio_devices; do
    if [ "$found_next" = true ]; then
        next_device="$device"
        break
    fi
    if [ "$device" = "$last_device" ]; then
        found_next=true
    fi
done

# Si no se encontró el siguiente dispositivo, el próximo será el primero de la lista
if [ -z "$next_device" ]; then
    next_device=$(echo "$audio_devices" | head -n 1)
fi

# Establece el siguiente dispositivo como el dispositivo de salida predeterminado
pacmd set-default-sink "$next_device"

# Guarda el nombre del nuevo dispositivo en el archivo de dispositivo
echo "$next_device" > "$device_file"

device_name=$(pacmd list-sinks | awk -v idx="$next_device" '/index:/{f=0} f; /index: '"$next_device"'/{f=1}' | awk -F'=' '/device.description/{print $2}' | tr -d '"' | xargs)

# Notifica el cambio de audio
notify-send "Audio" "$device_name"

# Imprime un mensaje en la terminal
echo "Dispositivo cambiado a: $device_name"
```

# ranger
git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons
echo "default_linemode devicons" >> $HOME/.config/ranger/rc.conf

# backlight (brillo de pantalla de laptops)
```bash
sudo pacman -S brightnessctl
brightnessctl <num>
```

## backlight i3 config
```bash
bindsym XF86MonBrightnessDown exec brightnessctl s 10%-
bindsym XF86MonBrightnessUp exec brightnessctl s +10%
```